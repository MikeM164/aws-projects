AWSTemplateFormatVersion: '2010-09-09'
Description: EventBridge Scheduler that triggers a Lambda function

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2StartStopPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resources: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resources: '*'

  StartEC2InstanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyScheduledLambda
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: s3://demo-mike164-artifacts
        S3Key: ec2start.zip

  StopEC2InstanceLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyScheduledLambda
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: s3://demo-mike164-artifacts
        S3Key: ec2stop.zip

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt StartEC2InstanceLambda.Arn

  StartScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: StartEC2LambdaScheduler
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: cron(0/5 * * * ? *) # every 5 minutes
      Target:
        Arn: !GetAtt StartEC2InstanceFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn

  StopScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: StopEC2LambdaScheduler
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: cron(0/5 * * * ? *) # every 5 minutes
      Target:
        Arn: !GetAtt StopEC2InstanceFunction.Arn
        RoleArn: !GetAtt SchedulerRole.Arn

  DevInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-a4c7edb2
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: dev-instance

Outputs:
  LambdaName:
    Value: !Ref MyLambdaFunction
    Description: Name of the Lambda function

  SchedulerName:
    Value: !Ref StartScheduler
    Description: Name of the EventBridge SchedulerxecutionRole:
