AWSTemplateFormatVersion: '2010-09-09'
Description: EventBridge Scheduler that triggers a Lambda function

Resources:  

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2StartStopPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: "*"
              - Effect: Allow
                Action:                  
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: !Sub 
                  - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${InstanceId} 
                  - { InstanceId: !ImportValue DevInstanceId }

  StartEC2InstanceLambda:
    Type: AWS::Lambda::Function
    Properties:      
      Runtime: python3.9
      Handler: ec2start.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128
      Code:
        S3Bucket: demo-mike164-artifacts
        S3Key: ec2start.zip
      Environment:
        Variables:
          INSTANCE_ID: !ImportValue DevInstanceId

  StopEC2InstanceLambda:
    Type: AWS::Lambda::Function
    Properties:      
      Runtime: python3.9
      Handler: ec2stop.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128
      Code:
        S3Bucket: demo-mike164-artifacts
        S3Key: ec2stop.zip
      Environment:
        Variables:
          INSTANCE_ID: !ImportValue DevInstanceId
  
  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowInvokeLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt StartEC2InstanceLambda.Arn
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt StopEC2InstanceLambda.Arn

  StartScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: StartEC2LambdaScheduler
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: cron(17 10 * * ? *) # specified time   
      Target:
        Arn: !GetAtt StartEC2InstanceLambda.Arn
        RoleArn: !GetAtt SchedulerRole.Arn

  StopScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: StopEC2LambdaScheduler
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: cron(25 10 * * ? *) # specified time
      Target:
        Arn: !GetAtt StopEC2InstanceLambda.Arn
        RoleArn: !GetAtt SchedulerRole.Arn  

Outputs: 
  StartLambdaName:
    Value: !Ref StartEC2InstanceLambda
    Description: Start EC2 Lambda function
  StartLambdaArn:
    Value: !GetAtt StartEC2InstanceLambda.Arn
    Description: ARN of Start EC2 Lambda function
  StopLambdaName:
    Value: !Ref StopEC2InstanceLambda
    Description: Stop EC2 Lambda function
  StopLambdaArn:
    Value: !GetAtt StopEC2InstanceLambda.Arn
    Description: ARN of Stop EC2 Lambda function
  StartSchedulerName:
    Value: !Ref StartScheduler
    Description: Name of the Start EC2 Scheduler
  StopSchedulerName:
    Value: !Ref StopScheduler
    Description: Name of the Stop EC2 Scheduler
